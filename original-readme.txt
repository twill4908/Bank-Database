For this project, I will design and implement a simple database system for a bank and provide an API that works with the database. The stategy I used for implementing this project, is the use of inheritence. My abstract superclass is an Account, which stores the client's account number and their name. The subclasses are checking account and credit account. Both sub classes extends from the super class Account. creditAccount extends Account, but also stores new data, like the client's credit limit which really implies the users available credit, and their debt. Lastly checkingAccount extends Account, but also stores new data, like the client's balance

My bankInterface class stores some of  the methods that I will then implement in my bankDataBase class. In the bankDataBase class I create two arrays, named creditAcct, and checkingAcct to store all the Accounts. In the Bank dataBase user's can either open up a credit or checking account, or both. The checking and credit accounts are stored individually to their own array's. Example: the array named creditAcct stores all created credit accounts, the same statergy applies for the checking accounts.

The methods in my bankDataBase class can apply to either a checkingAccount type, a creditAcount type, String, void and int. There's two void type methods to create either a checking account or an credit account. When creating the wanted account the data stored is the name, account number and either the avaialable credit or the amount. The method then stores the account to the appropriate array. 


In the changeBothName function, that's type void.The method takes in 4 parameters which are, (int accountNumber1, int accountNumber2, String currentName, String newName). the accounyNumber1 and accountNumber2 will be casted by either the checking or credit account. Then the if statments will see if its the same account holder by checking the current name of each account. If its an exact match then it will change and set the new name for each account. Otherwise an exception will be thrown stating its an incorrect name for the account.
Similarly in the changeCheckName its of type void, and the parameters are (int accountNumber, String newName). Once we get the checking account via accountNumber we will recieve there current name and set it equal to the newName in the parameter. Lastly in the changeCredName its of type void, and the parameters are (int accountNumber, String newName). Once we get the credit account via accountNumber we will recieve there current name and set it equal to the newName in the parameter.

For both seperate type void methods addCheckAccount, and addCredAccount. 


It takes in the checkingAccount a, or creditAccount object. It then stores the account to the appropriate array, and increments the by one whenever adding to the array. The array can only hold a certain amount, so whenenver the array is 5 index's away from its capactity, the expand method will be called. The expand method basically creates a new array based on the appropriate account, the size of the new array is the old array multiplied by 2. Then the for loop copies all the data from the previous array into the new array.

For createCheckAccount and createCredAccount, they both are void type methods.The parameters taken in are an extention of the abstract Account class parameters, but with extra added variable, also each account number is diffrent based on the type of account. createCredAccount parameters are (String clientName, int acctNum,  double creditLimit). the creditLimit variable is given and cannot be change but what will be affected is your aviableCredit, which is also a variable that keeps track of credit usage. The createCheckAccount parameters are (String clientName, int acctNum,  double amt) the amount variable is and can change if the person withdrawl, deposit, transfer, etc. After all info is stored it is then placed in the appropriate account array.

The deposit function is used for saving or storing more money into a checking account. The double type deposit method, It is only accesable for the checking account function. The parameters are (int accountNumber, double amount). it then stores and returns the exisiting balance + the amount given via the param. The withdrawl method is very similar to the deposit method, However the withdrawl method alows user to take and remove money from their checking account. The withdrawl method is also of type double, with the same parameters, and is also onlt used by checking accounts. Only diffrence is that the withdrawl method returns balance - the amount given via the param.

The transfer method is a way for two seperate checking account users to pay eachother. This function is of type String. 


The method is only accesable for type checkingAccount, the function allows one checking account user, to transfer money to another checking account user. The parameters are (int accountNumber, int accountNumber2, double amount). The accountNumber is the user that is giving funds (amount) to accountNumber2,accountNumber2 is the reciever of the funds. The amount is just the given amount in the param. The function then returns the accountNumber2's name and balance afer adding the amount.
 
The repay method is a way to pay your credit account debt, from your checking account. The repay function is of type void. The parameters taken is (int checkAccountNumber, int credAccountNumber,  String name, double amount) checkingAccount takes the given checking account, creditAccount takes the given credit account. The name is the given name via the param, Theres if statements in the method that will check if the credit account name and checking account name, matches the given name. This is required in the method because a user can only pay there credit account, from their checking account. If the name is valid, then the method knows there the correct user. From there the given amount via parameters will be removed from checking and added to credit, but the amount cannot exceed the credit account debt.

In the purchase function, both the checking account and the credit account will be used. This method will allow diffrent account users to make purchases via their account. The parameters are (int accountNumber, String name, double item). If the given account number via param is a checking account, it will then check if that checking account  name matches the name given via param. Then it also checks if that checking account balance is greater than or equal to the item price, which is given in the parameters. If it passes all the if statements then the checking user will be able to but the item, and the item price will be deducted rom their account balance. However if checking account balance is lower then the item price, An exception will be thrown telling the user "Your balance is too low for this purchase. "  If the given accountNumber via param is a credit account, it will then check if credit account name matches the given name via param. Then it checks if avaialable credit is greater than the credit account users debt + the item price. If it passes those if statements then the credit account will make the purchase, then save and store the new available credit amount, which is the credit account user's debt + item. However if . Otherwise, if it does not succesfully pass threw the if statment because the avaialable credit is less than the item price, or the credit users debt + the item price is greater than the avaialable credit, then an exception would be thrown stating "This item exceeds your given avialable credit." If the user enters an incoreect name or account number via parameter, which does not mata any data from the account arrays for either the checking account of the credit account and exception will be thrown stating "Make sure you enter valid account number, and the currect name."

For the getCheckAccount method thats type checkingAccount has one parameter, which is (int accountNumber) it returns account user for the given accountNumber via parameter.

For the getCredAccount method thats type creditAccount has one parameter, which is (int accountNumber) it returns account user for the given accountNumber via parameter.


For the printCreditAcct method that is type void, thats allows the bank data base to print all the credits account stored in the array, with the message stating "This is an active credit account, the account number is: " + acctNum).

For the printCheckAcct method that is type void, thats allows the bank data base to print all the checking account stored in the array, with the message stating "This is an active checking account, the account number is: " + acctNum).
